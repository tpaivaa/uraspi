/*
 Debounce

 Each time the input pin goes from LOW to HIGH (e.g. because of a push-button
 press), the output pin is toggled from LOW to HIGH or HIGH to LOW.  There's
 a minimum delay between toggles to debounce the circuit (i.e. to ignore
 noise).

 The circuit:
 * LED attached from pin 13 to ground
 * pushbutton attached from pin 2 to +5V
 * 10K resistor attached from pin 2 to ground
 */


// constants won't change. They're used here to
// set pin numbers:
const int verantaSwitch1 = 2;   // Verannan kytkin 1 input
const int verantaSwitch2 = 3;   // Verannan kytkin 2 input
const int verantaSwitch3 = 4;   // Verannan kytkin 3 input
const int verantaSwitch4 = 5;   // Verannan kytkin 4 input
const int verantaLight = 10;    // Verannan valo ja kytkimen1 led output
const int out2 = 11;            //  valo ja kytkimen2 led output
const int out3 = 12;            //  valo ja kytkimen3 led output
const int ulkoLight = 13;       // Ulkovalo ja kytkimen4 led output

String inputString = "";         // a string to hold incoming data
boolean stringComplete = false;  // whether the string is complete

// Variables will change:
int verantaLightState = HIGH; // the current state of the veranta light
int switch1State;             // the current reading from the verantaLight
int lastSwitch1State = LOW;   // the previous reading from the Switch1

int light2State = HIGH;    // the current state of the output pin
int switch2State;             // the current reading from the input pin
int lastSwitch2State = LOW;   // the previous reading from the input pin

int light3State = HIGH;    // the current state of the output pin
int switch3State;             // the current reading from the input pin
int lastSwitch3State = LOW;   // the previous reading from the input pin

int ulkoLightState = HIGH;    // the current state of the output pin
int switch4State;             // the current reading from the input pin
int lastSwitch4State = LOW;   // the previous reading from the input pin

// the following variables are long's because the time, measured in miliseconds,
// will quickly become a bigger number than can be stored in an int.
long lastDebounceTime1 = 0;  // the last time the output pin was toggled
long lastDebounceTime2 = 0;
long lastDebounceTime3 = 0;
long lastDebounceTime4 = 0;
long debounceDelay = 100;    // the debounce time; increase if the output flickers


void setup() {
  // initialize serial:
  Serial.begin(9600);
  Serial.println("Serial Init");
  // Flush switch states to serial connection
  Serial.print("sw1:");
  Serial.println(verantaLightState, DEC);
  Serial.print("sw2:");
  Serial.println(light2State, DEC);
  Serial.print("sw3:");
  Serial.println(light3State, DEC);
  Serial.print("sw4:");
  Serial.println(ulkoLightState, DEC);
  
  inputString.reserve(200);
  // initialize pin inputs and outputs
  pinMode(verantaSwitch1, INPUT);
  pinMode(verantaSwitch2, INPUT);
  pinMode(verantaSwitch3, INPUT);
  pinMode(verantaSwitch4, INPUT);
  
  pinMode(verantaLight, OUTPUT);
  pinMode(out2, OUTPUT);
  pinMode(out3, OUTPUT);
  pinMode(ulkoLight, OUTPUT);


  // set initial Lights state
  digitalWrite(verantaLight, verantaLightState);
  digitalWrite(out2, light2State);
  digitalWrite(out3, light3State);
  digitalWrite(ulkoLight, ulkoLightState);
}

void loop() {
  // read the state of the switch into a local variable:
  int sw1reading = digitalRead(verantaSwitch1);
  int sw2reading = digitalRead(verantaSwitch2);
  int sw3reading = digitalRead(verantaSwitch3);
  int sw4reading = digitalRead(verantaSwitch4);


  // check to see if the button is just pressed 
  // (i.e. the input went from LOW to HIGH),  and you've waited
  // long enough since the last press to ignore any noise:

  // If the switch changed, due to noise or pressing:
  if (sw1reading != lastSwitch1State) {
    // reset the debouncing timer
    lastDebounceTime1 = millis();
  }
    // If the switch changed, due to noise or pressing:
  if (sw2reading != lastSwitch2State) {
    // reset the debouncing timer
    lastDebounceTime2 = millis();
  }
    // If the switch changed, due to noise or pressing:
  if (sw3reading != lastSwitch3State) {
    // reset the debouncing timer
    lastDebounceTime3 = millis();
  }
    if (sw4reading != lastSwitch4State) {
    // reset the debouncing timer
    lastDebounceTime4 = millis();
  }

  if ((millis() - lastDebounceTime1) > debounceDelay) {
    // whatever the reading is at, it's been there for longer
    // than the debounce delay, so take it as the actual current state:

    // if the button state has changed:
    if (sw1reading != switch1State) {
      switch1State = sw1reading;

      // only toggle the out if the new button state is HIGH
      if (switch1State == HIGH) {
        verantaLightState = !verantaLightState;
        Serial.print("sw1:");
        Serial.println(verantaLightState, DEC);
      }
    }
  }

    if ((millis() - lastDebounceTime2) > debounceDelay) {
    // whatever the reading is at, it's been there for longer
    // than the debounce delay, so take it as the actual current state:

    // if the button state has changed:
    if (sw2reading != switch2State) {
      switch2State = sw2reading;

      // only toggle the out if the new button state is HIGH
      if (switch2State == HIGH) {
        light2State = !light2State;
        Serial.print("sw2:");
        Serial.println(light2State,DEC);
      }
    }
  }

    if ((millis() - lastDebounceTime3) > debounceDelay) {
    // whatever the reading is at, it's been there for longer
    // than the debounce delay, so take it as the actual current state:

    // if the button state has changed:
    if (sw3reading != switch3State) {
      switch3State = sw3reading;

      // only toggle the out if the new button state is HIGH
      if (switch3State == HIGH) {
        light3State = !light3State;
        Serial.print("sw3:");
        Serial.println(light3State, DEC);
      }
    }
  }

    if ((millis() - lastDebounceTime4) > debounceDelay) {
    // whatever the reading is at, it's been there for longer
    // than the debounce delay, so take it as the actual current state:

    // if the button state has changed:
    if (sw4reading != switch4State) {
      switch4State = sw4reading;

      // only toggle the out if the new button state is HIGH
      if (switch4State == HIGH) {
        ulkoLightState = !ulkoLightState;
        Serial.print("sw4:");
        Serial.println(ulkoLightState, DEC);
      }
    }
  }  

  
  if (stringComplete) {
    Serial.print(inputString);
    if (inputString == "out;") {
      ulkoLightState = !ulkoLightState;
      Serial.print("sw4:");
      Serial.println(ulkoLightState, DEC);
    }
    inputString = "";
    stringComplete = false;
  }

  // set the LED:

  digitalWrite(verantaLight, verantaLightState);  
  digitalWrite(out2, light2State);
  digitalWrite(out3, light3State);
  digitalWrite(ulkoLight, ulkoLightState);

  // save the reading.  Next time through the loop,
  // it'll be the lastButtonState:
  lastSwitch1State = sw1reading;
  lastSwitch2State = sw2reading;
  lastSwitch3State = sw3reading;
  lastSwitch4State = sw4reading;
  
}

void serialEvent() {
  while (Serial.available()) {
    // get the new byte:
    char inChar = (char)Serial.read(); 
    // add it to the inputString:
    inputString += inChar;
    // if the incoming character is a newline, set a flag
    // so the main loop can do something about it:
    if (inChar == ';') {
      stringComplete = true;
    } 
  }
}
